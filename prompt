#!/bin/bash

source "${HOME}/dotfiles/color"

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

prompt_pipenv () {
    # Check is pipenv is active
    if [[ -v PIPENV_ACTIVE ]]; then
        echo -e "($(basename \"$VIRTUAL_ENV\" | rev | cut -d "-" -f 2- |rev))"
    fi;
}

prompt_docker_machine () {
    # Check is docker-machine is active
    if [[ -v DOCKER_MACHINE_NAME ]]; then
        echo -e "($DOCKER_MACHINE_NAME)"
    fi;
}

cloud=""
if grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
	  cloud="☁️ "
fi


# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	  userStyle="${red}";
else
	  userStyle="${blue}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	  hostStyle="${bold}${cyan}";
else
	  hostStyle="${cyan}";
fi;

# Set the terminal title to the current working directory.
if [ ! -z ${INSIDE_EMACS+x} ]; then
    PS1=""
else
    PS1="\[\033]0;\w\007\]";
fi


PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]${cloud}\h"; # host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
PS1+="\n";
PS1+="\[${violet}\]\$(prompt_docker_machine)";
PS1+="\[${yellow}\]\$(prompt_pipenv)";
PS1+=" \[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→\[${reset}\] ";
export PS2;
